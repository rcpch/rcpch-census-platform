# Generated by Django 4.2.8 on 2023-12-27 17:16

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("boundary_identifier", models.CharField(max_length=9)),
                ("name", models.CharField(max_length=16)),
                ("welsh_name", models.CharField(max_length=17)),
                ("bng_e", models.BigIntegerField()),
                ("bng_n", models.BigIntegerField()),
                ("long", models.FloatField()),
                ("lat", models.FloatField()),
                ("globalid", models.CharField(max_length=38)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
            ],
            options={
                "verbose_name": "Country",
                "verbose_name_plural": "Countries",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="DataZone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Data Zone Code"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Data Zone Name"),
                ),
                ("year", models.IntegerField(verbose_name="Data Zone Year")),
            ],
            options={
                "verbose_name": "Data Zone",
                "verbose_name_plural": "Data Zones",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="EnglishIndexMultipleDeprivation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "imd_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Index of Multiple Deprivation (IMD) Score",
                        max_digits=5,
                        null=True,
                        verbose_name="Index of Multiple Deprivation (IMD) Score",
                    ),
                ),
                (
                    "imd_rank",
                    models.IntegerField(
                        help_text="Index of Multiple Deprivation (IMD) Rank (where 1 is most deprived)",
                        verbose_name="Index of Multiple Deprivation",
                    ),
                ),
                (
                    "imd_decile",
                    models.IntegerField(
                        help_text="Index of Multiple Deprivation (IMD) Decile (where 1 is most deprived 10% of LSOAs)",
                        verbose_name="Index of Multiple Deprivation (IMD) Decile",
                    ),
                ),
                (
                    "income_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Income Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Income Score (rate)",
                    ),
                ),
                (
                    "income_score_exponentially_transformed",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Income Score exponentially tranformed",
                        max_digits=6,
                        null=True,
                        verbose_name="Income Score exponentially tranformed",
                    ),
                ),
                (
                    "income_rank",
                    models.IntegerField(
                        help_text="Income Rank (where 1 is most deprived)",
                        verbose_name="Income Rank",
                    ),
                ),
                (
                    "income_decile",
                    models.IntegerField(
                        help_text="Income Decile (where 1 is most deprived 10% of LSOAs)",
                        verbose_name="Income Decile",
                    ),
                ),
                (
                    "employment_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Employment Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Employment Score (rate)",
                    ),
                ),
                (
                    "employment_score_exponentially_transformed",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Employment Score exponentially transformed",
                        max_digits=6,
                        null=True,
                        verbose_name="Employment Score exponentially transformed",
                    ),
                ),
                (
                    "employment_rank",
                    models.IntegerField(
                        help_text="Employment Rank (where 1 is most deprived)",
                        verbose_name="Employment Rank",
                    ),
                ),
                (
                    "employment_decile",
                    models.IntegerField(
                        help_text="Employment Decile (where 1 is most deprived 10% of LSOAs)",
                        verbose_name="Employment Decile",
                    ),
                ),
                (
                    "education_skills_training_score_exponentially_transformed",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Education, Skills and Training Score exponentially transformed",
                        max_digits=6,
                        null=True,
                        verbose_name="Education, Skills and Training Score exponentially transformed",
                    ),
                ),
                (
                    "education_skills_training_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Education, Skills and Training Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Education, Skills and Training Score (rate)",
                    ),
                ),
                (
                    "education_skills_training_rank",
                    models.IntegerField(
                        help_text="Education, Skills and Training Rank (where 1 is most deprived)",
                        verbose_name="Education, Skills and Training Rank",
                    ),
                ),
                (
                    "education_skills_training_decile",
                    models.IntegerField(
                        help_text="Education, Skills and Training Decile (where 1 is most deprived 10% of LSOAs)",
                        verbose_name="Education, Skills and Training Decile",
                    ),
                ),
                (
                    "children_young_people_sub_domain_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Children and Young People Sub-domain Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Children and Young People Sub-domain Score (rate)",
                    ),
                ),
                (
                    "children_young_people_sub_domain_rank",
                    models.IntegerField(
                        help_text="Children and Young People Sub-domain Rank (where 1 is most deprived)",
                        null=True,
                        verbose_name="Children and Young People Sub-domain Rank (where 1 is most deprived)",
                    ),
                ),
                (
                    "children_young_people_sub_domain_decile",
                    models.IntegerField(
                        help_text="Children and Young People Sub-domain Decile (where 1 is most deprived) Decile",
                        null=True,
                        verbose_name="Children and Young People Sub-domain Decile (where 1 is most deprived) Decile",
                    ),
                ),
                (
                    "adult_skills_sub_domain_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Adult Skills Sub-domain Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Adult Skills Sub-domain Score (rate)",
                    ),
                ),
                (
                    "adult_skills_sub_domain_rank",
                    models.IntegerField(
                        help_text="Adult Skills Sub-domain Rank (where 1 is most deprived)",
                        null=True,
                        verbose_name="Adult Skills Sub-domain Rank (where 1 is most deprived)",
                    ),
                ),
                (
                    "adult_skills_sub_domain_decile",
                    models.IntegerField(
                        help_text="Adult Skills Sub-domain Decile (where 1 is most deprived) Decile",
                        null=True,
                        verbose_name="Adult Skills Sub-domain Decile (where 1 is most deprived) Decile",
                    ),
                ),
                (
                    "health_deprivation_disability_score_exponentially_transformed",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Health Deprivation and Disability Score exponentially transformed",
                        max_digits=6,
                        null=True,
                        verbose_name="Health Deprivation and Disability Score exponentially transformed",
                    ),
                ),
                (
                    "health_deprivation_disability_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Health Deprivation and Disability Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Health Deprivation and Disability Score (rate)",
                    ),
                ),
                (
                    "health_deprivation_disability_rank",
                    models.IntegerField(
                        help_text="Health Deprivation and Disability Rank (where 1 is most deprived)",
                        verbose_name="Health Deprivation and Disability Rank",
                    ),
                ),
                (
                    "health_deprivation_disability_decile",
                    models.IntegerField(
                        help_text="Health Deprivation and Disability Decile (where 1 is most deprived 10% of LSOAs)",
                        verbose_name="Health Deprivation and Disability Decile",
                    ),
                ),
                (
                    "crime_score_exponentially_transformed",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Crime Score exponentially transformed",
                        max_digits=6,
                        null=True,
                        verbose_name="Crime Score exponentially transformed",
                    ),
                ),
                (
                    "crime_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Crime Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Crime Score (rate)",
                    ),
                ),
                (
                    "crime_rank",
                    models.IntegerField(
                        help_text="Crime Rank (where 1 is most deprived)",
                        verbose_name="Crime Rank",
                    ),
                ),
                (
                    "crime_decile",
                    models.IntegerField(
                        help_text="Crime Decile (where 1 is most deprived 10% of LSOAs)",
                        verbose_name="Crime Decile",
                    ),
                ),
                (
                    "barriers_to_housing_services_score_exponentially_transformed",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Barriers to Housing and Services Score Exponentially transformed",
                        max_digits=6,
                        null=True,
                        verbose_name="Barriers to Housing and Services Score Exponentially transformed",
                    ),
                ),
                (
                    "barriers_to_housing_services_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Barriers to Housing and Services Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Barriers to Housing and Services Score (rate)",
                    ),
                ),
                (
                    "barriers_to_housing_services_rank",
                    models.IntegerField(
                        help_text="Barriers to Housing and Services Rank (where 1 is most deprived)",
                        verbose_name="Barriers to Housing and Services Rank",
                    ),
                ),
                (
                    "barriers_to_housing_services_decile",
                    models.IntegerField(
                        help_text="Barriers to Housing and Services Decile (where 1 is most deprived 10% of LSOAs)",
                        verbose_name="Barriers to Housing and Services Decile",
                    ),
                ),
                (
                    "geographical_barriers_sub_domain_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Geographical Barriers Sub-domain Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Geographical Barriers Sub-domain Score",
                    ),
                ),
                (
                    "geographical_barriers_sub_domain_rank",
                    models.IntegerField(
                        help_text="Geographical Barriers Sub-domain Rank (where 1 is most deprived)",
                        null=True,
                        verbose_name="Geographical Barriers Sub-domain Rank",
                    ),
                ),
                (
                    "geographical_barriers_sub_domain_decile",
                    models.IntegerField(
                        help_text="Geographical Barriers Sub-domain Decile (where 1 is most deprived 10% of LSOAs)",
                        null=True,
                        verbose_name="Geographical Barriers Sub-domain Decile",
                    ),
                ),
                (
                    "wider_barriers_sub_domain_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Wider Barriers Sub-domain Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Wider Barriers Sub-domain Score (rate)",
                    ),
                ),
                (
                    "wider_barriers_sub_domain_rank",
                    models.IntegerField(
                        help_text="Wider Barriers Sub-domain Rank (where 1 is most deprived)",
                        null=True,
                        verbose_name="Wider Barriers Sub-domain Rank",
                    ),
                ),
                (
                    "wider_barriers_sub_domain_decile",
                    models.IntegerField(
                        help_text="Wider Barriers Sub-domain Decile (where 1 is most deprived 10% of LSOAs)",
                        null=True,
                        verbose_name="Wider Barriers Sub-domain Decile",
                    ),
                ),
                (
                    "living_environment_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Living Environment Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Living Environment Score (rate)",
                    ),
                ),
                (
                    "living_environment_score_exponentially_transformed",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Living Environment Score exponentially transformed",
                        max_digits=6,
                        null=True,
                        verbose_name="Living Environment Score exponentially transformed",
                    ),
                ),
                (
                    "living_environment_rank",
                    models.IntegerField(
                        help_text="Living Environment Rank (where 1 is most deprived)",
                        verbose_name="Living Environment Rank",
                    ),
                ),
                (
                    "living_environment_decile",
                    models.IntegerField(
                        help_text="Living Environment Decile (where 1 is most deprived 10% of LSOAs)",
                        verbose_name="Living Environment Decile",
                    ),
                ),
                (
                    "indoors_sub_domain_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Indoors Sub-domain Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Indoors Sub-domain Score (rate)",
                    ),
                ),
                (
                    "indoors_sub_domain_rank",
                    models.IntegerField(
                        help_text="Indoors Sub-domain Rank (where 1 is most deprived)",
                        null=True,
                        verbose_name="Indoors Sub-domain Rank",
                    ),
                ),
                (
                    "indoors_sub_domain_decile",
                    models.IntegerField(
                        help_text="Indoors Sub-domain Decile (where 1 is most deprived 10% of LSOAs)",
                        null=True,
                        verbose_name="Indoors Sub-domain Decile",
                    ),
                ),
                (
                    "outdoors_sub_domain_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Outdoors Sub-domain Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Outdoors Sub-domain Score (rate)",
                    ),
                ),
                (
                    "outdoors_sub_domain_rank",
                    models.IntegerField(
                        help_text="Outdoors Sub-domain Rank(where 1 is most deprived)",
                        null=True,
                        verbose_name="Outdoors Sub-domain Rank",
                    ),
                ),
                (
                    "outdoors_sub_domain_decile",
                    models.IntegerField(
                        help_text="Outdoors Sub-domain Decile (where 1 is most deprived 10% of LSOAs)",
                        null=True,
                        verbose_name="Outdoors Sub-domain Decile",
                    ),
                ),
                (
                    "idaci_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Income Deprivation Affecting Children Index (IDACI) Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Income Deprivation Affecting Children Index Score (rate)",
                    ),
                ),
                (
                    "idaci_rank",
                    models.IntegerField(
                        help_text="Income Deprivation Affecting Children Index (IDACI) Rank (where 1 is most deprived)",
                        null=True,
                        verbose_name="Income Deprivation Affecting Children Index Rank",
                    ),
                ),
                (
                    "idaci_decile",
                    models.IntegerField(
                        help_text="Income Deprivation Affecting Children Index (IDACI) Decile (where 1 is most deprived 10% of LSOAs)",
                        null=True,
                        verbose_name="Income Deprivation Affecting Children Index Decile",
                    ),
                ),
                (
                    "idaopi_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Income Deprivation Affecting Older People Index (IDAOPI) Score (rate)",
                        max_digits=5,
                        null=True,
                        verbose_name="Income Deprivation Affecting Older People Index Score (rate)",
                    ),
                ),
                (
                    "idaopi_rank",
                    models.IntegerField(
                        help_text="Income Deprivation Affecting Older People Index (IDAOPI) Rank (where 1 is most deprived)",
                        null=True,
                        verbose_name="Income Deprivation Affecting Older People Index Rank",
                    ),
                ),
                (
                    "idaopi_decile",
                    models.IntegerField(
                        help_text="Income Deprivation Affecting Older People Index (IDAOPI) Decile (where 1 is most deprived 10% of LSOAs)",
                        null=True,
                        verbose_name="Income Deprivation Affecting Older People Index Decile",
                    ),
                ),
            ],
            options={
                "verbose_name": "English Index of Multiple Deprivation",
                "verbose_name_plural": "English Indices of Multiple Deprivation",
                "ordering": ("imd_rank",),
            },
        ),
        migrations.CreateModel(
            name="GeneralPractice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ods_code",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "website",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address1",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address2",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address3",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "county",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("longitude", models.FloatField(blank=True, default=None, null=True)),
                (
                    "postcode",
                    models.CharField(
                        blank=True, default=None, max_length=10, null=True
                    ),
                ),
                (
                    "geocode_coordinates",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, default=None, null=True, srid=27700
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("published_at", models.DateField(blank=True, default=None, null=True)),
            ],
            options={
                "verbose_name": "GeneralPractice",
                "verbose_name_plural": "GeneralPractices",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="GreenSpace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "houses_address_count",
                    models.IntegerField(verbose_name="Houses - Address Count"),
                ),
                (
                    "houses_addresses_with_private_outdoor_space_count",
                    models.IntegerField(
                        verbose_name="Houses - Addresses with private outdoor space Count"
                    ),
                ),
                (
                    "houses_outdoor_space_total_area",
                    models.IntegerField(
                        verbose_name="Houses - Outdoor space total area (m2)"
                    ),
                ),
                (
                    "houses_percentage_of_addresses_with_private_outdoor_space",
                    models.IntegerField(
                        verbose_name="Houses - Percentage of addresses with private outdoor space"
                    ),
                ),
                (
                    "houses_average_size_private_outdoor_space",
                    models.IntegerField(
                        verbose_name="Houses - Average size of private outdoor space (m2)"
                    ),
                ),
                (
                    "houses_median_size_private_outdoor_space",
                    models.IntegerField(
                        verbose_name="Houses - Median size of private outdoor space (m2)"
                    ),
                ),
                (
                    "flats_address_count",
                    models.IntegerField(verbose_name="Flats - Address Count"),
                ),
                (
                    "flats_addresses_with_private_outdoor_space_count",
                    models.IntegerField(
                        verbose_name="Flats - Addresses with private outdoor space Count"
                    ),
                ),
                (
                    "flats_outdoor_space_total_area",
                    models.IntegerField(
                        verbose_name="Flats - Outdoor space total area (m2)"
                    ),
                ),
                (
                    "flats_outdoor_space_count",
                    models.IntegerField(
                        verbose_name="Flats - Count of flats with outdoor space"
                    ),
                ),
                (
                    "flats_percentage_of_addresses_with_private_outdoor_space",
                    models.IntegerField(
                        verbose_name="Flats - Percentage of addresses with private outdoor space"
                    ),
                ),
                (
                    "flats_average_size_private_outdoor_space",
                    models.IntegerField(
                        verbose_name="Flats - Average size of private outdoor space (m2)"
                    ),
                ),
                (
                    "flats_average_number_of_flats_sharing_a_garden",
                    models.IntegerField(
                        verbose_name="Flats - Average number of flats sharing a garden"
                    ),
                ),
                (
                    "total_addresses_count",
                    models.IntegerField(verbose_name="Total - count of all addresses"),
                ),
                (
                    "total_addresses_with_private_outdoor_space_count",
                    models.IntegerField(
                        verbose_name="Total - count of all addresses with private outdoor space"
                    ),
                ),
                (
                    "total_percentage_addresses_with_private_outdoor_space",
                    models.IntegerField(
                        verbose_name="Total - percentage of all addresses with private outdoor space"
                    ),
                ),
                (
                    "total_average_size_private_outdoor_space",
                    models.IntegerField(
                        verbose_name="Total - average size of all private outdoor space"
                    ),
                ),
            ],
            options={
                "verbose_name": "Access to Green Space",
                "verbose_name_plural": "Access to Green Spaces",
            },
        ),
        migrations.CreateModel(
            name="IntegratedCareBoard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("boundary_identifier", models.CharField(max_length=9)),
                ("name", models.CharField(max_length=77)),
                ("bng_e", models.BigIntegerField()),
                ("bng_n", models.BigIntegerField()),
                ("long", models.FloatField()),
                ("lat", models.FloatField()),
                ("globalid", models.CharField(max_length=38)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
                ("ods_code", models.CharField()),
                ("publication_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Integrated Care Board",
                "verbose_name_plural": "Integrated Care Boards",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="LocalAuthority",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "local_authority_district_code",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        verbose_name="Local Authority District code (2019)",
                    ),
                ),
                (
                    "local_authority_district_name",
                    models.CharField(
                        max_length=50,
                        verbose_name="Local Authority District name (2019)",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(verbose_name="Local Authority District Year"),
                ),
            ],
            options={
                "verbose_name": ("Local Authority",),
                "verbose_name_plural": "Local Authorities",
            },
        ),
        migrations.CreateModel(
            name="LocalHealthBoard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("boundary_identifier", models.CharField(max_length=9)),
                ("name", models.CharField(max_length=41)),
                ("welsh_name", models.CharField(max_length=40)),
                ("bng_e", models.FloatField()),
                ("bng_n", models.FloatField()),
                ("long", models.FloatField()),
                ("lat", models.FloatField()),
                ("globalid", models.CharField(max_length=38)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
                ("ods_code", models.CharField(max_length=3)),
                ("publication_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Local Health Board",
                "verbose_name_plural": "Local Health Boards",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="LondonBorough",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=22)),
                ("gss_code", models.CharField(max_length=9)),
                ("hectares", models.FloatField()),
                ("nonld_area", models.FloatField()),
                ("ons_inner", models.CharField(max_length=1)),
                ("sub_2009", models.CharField(max_length=7, null=True)),
                ("sub_2006", models.CharField(max_length=10, null=True)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
            ],
            options={
                "verbose_name": "London Borough",
                "verbose_name_plural": "London Boroughs",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="LSOA",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lsoa_code",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="LSOA code (2011)"
                    ),
                ),
                (
                    "lsoa_name",
                    models.CharField(max_length=50, verbose_name="LSOA name (2011)"),
                ),
                ("year", models.IntegerField(verbose_name="Year LSOA calculated")),
                (
                    "total_population_mid_2015",
                    models.IntegerField(
                        help_text="Total population: mid 2015 (excluding prisoners)",
                        null=True,
                        verbose_name="Total population: mid 2015 (excluding prisoners)",
                    ),
                ),
                (
                    "dependent_children_mid_2015",
                    models.IntegerField(
                        help_text="Dependent Children aged 0-15: mid 2015 (excluding prisoners)",
                        null=True,
                        verbose_name="Dependent Children aged 0-15: mid 2015 (excluding prisoners)",
                    ),
                ),
                (
                    "population_16_59_mid_2015",
                    models.IntegerField(
                        help_text="Population aged 16-59: mid 2015 (excluding prisoners)",
                        null=True,
                        verbose_name="Population aged 16-59: mid 2015 (excluding prisoners)",
                    ),
                ),
                (
                    "older_population_over_16_mid_2015",
                    models.IntegerField(
                        help_text="Older population aged 60 and over: mid 2015 (excluding prisoners)",
                        null=True,
                        verbose_name="Older population aged 60 and over: mid 2015 (excluding prisoners)",
                    ),
                ),
                (
                    "working_age_population_over_18_mid_2015",
                    models.IntegerField(
                        help_text="Working age population 18-59/64: for use with Employment Deprivation Domain (excluding prisoners)",
                        null=True,
                        verbose_name="Working age population 18-59/64: for use with Employment Deprivation Domain (excluding prisoners)",
                    ),
                ),
                (
                    "local_authority_district",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rcpch_census_platform.localauthority",
                    ),
                ),
            ],
            options={
                "verbose_name": ("LSOA",),
                "verbose_name_plural": "LSOAs",
            },
        ),
        migrations.CreateModel(
            name="MSOA",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "msoa_code",
                    models.CharField(
                        help_text="Middle Layer Super Output Layer code",
                        max_length=50,
                        unique=True,
                        verbose_name="MSOA Code",
                    ),
                ),
                (
                    "msoa_name",
                    models.CharField(
                        help_text="Middle Layer Super Output Layer name",
                        max_length=50,
                        verbose_name="MSOA name",
                    ),
                ),
                (
                    "year",
                    models.IntegerField(
                        verbose_name="Middle Layer Super Output Layer Year"
                    ),
                ),
                (
                    "local_authority_district",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rcpch_census_platform.localauthority",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NHSEnglandRegion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("boundary_identifier", models.CharField(max_length=9)),
                ("name", models.CharField(max_length=24)),
                ("bng_e", models.BigIntegerField()),
                ("bng_n", models.BigIntegerField()),
                ("long", models.FloatField()),
                ("lat", models.FloatField()),
                ("globalid", models.CharField(max_length=38)),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(srid=27700),
                ),
                ("region_code", models.CharField(blank=True, null=True, unique=True)),
                ("publication_date", models.DateField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "NHS England Region",
                "verbose_name_plural": "NHS England Regions",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="OPENUKNetwork",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField()),
                ("boundary_identifier", models.CharField(unique=True)),
                ("country", models.CharField()),
                ("publication_date", models.DateField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record created by user in %(class)",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_%(class)s",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="record updated by user in %(class)",
                    ),
                ),
            ],
            options={
                "verbose_name": "OPENUK Network",
                "verbose_name_plural": "OPENUK Networks",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="PaediatricDiabetesUnit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pz_code",
                    models.CharField(
                        max_length=5, verbose_name="Paediatric Diabetes Unit PZ Number"
                    ),
                ),
            ],
            options={
                "verbose_name": "Paediatric Diabetes Unit",
                "verbose_name_plural": "Paediatric Diabetes Units",
                "ordering": ("pz_code",),
            },
        ),
        migrations.CreateModel(
            name="SOA",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField()),
                ("soa_code", models.CharField(max_length=50, unique=True)),
                ("soa_name", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="WelshIndexMultipleDeprivation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("imd_rank", models.IntegerField()),
                ("imd_quartile", models.SmallIntegerField()),
                ("imd_quintile", models.SmallIntegerField()),
                ("imd_decile", models.SmallIntegerField()),
                (
                    "imd_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("income_rank", models.IntegerField()),
                ("income_quartile", models.SmallIntegerField()),
                ("income_quintile", models.SmallIntegerField()),
                ("income_decile", models.SmallIntegerField()),
                (
                    "income_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("employment_rank", models.IntegerField()),
                ("employment_quartile", models.SmallIntegerField()),
                ("employment_quintile", models.SmallIntegerField()),
                ("employment_decile", models.SmallIntegerField()),
                (
                    "employment_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("health_rank", models.IntegerField()),
                ("health_quartile", models.SmallIntegerField()),
                ("health_quintile", models.SmallIntegerField()),
                ("health_decile", models.SmallIntegerField()),
                (
                    "health_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("education_rank", models.IntegerField()),
                ("education_quartile", models.SmallIntegerField()),
                ("education_quintile", models.SmallIntegerField()),
                ("education_decile", models.SmallIntegerField()),
                (
                    "education_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("access_to_services_rank", models.IntegerField()),
                ("access_to_services_quartile", models.SmallIntegerField()),
                ("access_to_services_quintile", models.SmallIntegerField()),
                ("access_to_services_decile", models.SmallIntegerField()),
                (
                    "access_to_services_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("housing_rank", models.IntegerField()),
                ("housing_quartile", models.SmallIntegerField()),
                ("housing_quintile", models.SmallIntegerField()),
                ("housing_decile", models.SmallIntegerField()),
                (
                    "housing_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("community_safety_rank", models.IntegerField()),
                ("community_safety_quartile", models.SmallIntegerField()),
                ("community_safety_quintile", models.SmallIntegerField()),
                ("community_safety_decile", models.SmallIntegerField()),
                (
                    "community_safety_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("physical_environment_rank", models.IntegerField()),
                ("physical_environment_quartile", models.SmallIntegerField()),
                ("physical_environment_quintile", models.SmallIntegerField()),
                ("physical_environment_decile", models.SmallIntegerField()),
                (
                    "physical_environment_score",
                    models.DecimalField(
                        blank=True, decimal_places=1, max_digits=4, null=True
                    ),
                ),
                ("year", models.IntegerField()),
                (
                    "lsoa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rcpch_census_platform.lsoa",
                    ),
                ),
            ],
            options={
                "verbose_name": "Welsh Index of Multiple Deprivation",
                "verbose_name_plural": "Welsh Indices of Multiple Deprivation",
                "ordering": ("imd_rank",),
            },
        ),
        migrations.CreateModel(
            name="Ward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ward_code",
                    models.CharField(
                        help_text="Ward code",
                        max_length=50,
                        unique=True,
                        verbose_name="Ward Code",
                    ),
                ),
                (
                    "ward_name",
                    models.CharField(
                        help_text="Ward name", max_length=50, verbose_name="Ward name"
                    ),
                ),
                ("year", models.IntegerField(verbose_name="Ward year")),
                (
                    "msoa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rcpch_census_platform.msoa",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Trust",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("ods_code", models.CharField(max_length=3, unique=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "address_line_1",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("address_line_2", models.CharField(blank=True, max_length=100)),
                (
                    "town",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "postcode",
                    models.CharField(
                        blank=True, default=None, max_length=10, null=True
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True, default=None, max_length=50, null=True
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "website",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("published_at", models.DateField(blank=True, default=None, null=True)),
            ],
            options={
                "verbose_name": "Trust",
                "verbose_name_plural": "Trusts",
                "ordering": ("name",),
                "indexes": [
                    models.Index(
                        fields=["ods_code"], name="rcpch_censu_ods_cod_1c6551_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ScottishIndexMultipleDeprivation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField()),
                ("version", models.SmallIntegerField()),
                ("imd_rank", models.IntegerField()),
                ("income_rank", models.IntegerField()),
                ("employment_rank", models.IntegerField()),
                ("education_rank", models.IntegerField()),
                ("health_rank", models.IntegerField()),
                ("access_rank", models.IntegerField()),
                ("crime_rank", models.IntegerField()),
                ("housing_rank", models.IntegerField()),
                (
                    "data_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="rcpch_census_platform.datazone",
                    ),
                ),
            ],
            options={
                "verbose_name": "Scottish Index of Multiple Deprivation",
                "verbose_name_plural": "Scottish Indices of Multiple Deprivation",
                "ordering": ("imd_rank",),
            },
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ods_code",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "website",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address1",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address2",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "address3",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "county",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("longitude", models.FloatField(blank=True, default=None, null=True)),
                (
                    "postcode",
                    models.CharField(
                        blank=True, default=None, max_length=10, null=True
                    ),
                ),
                (
                    "geocode_coordinates",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, default=None, null=True, srid=27700
                    ),
                ),
                ("active", models.BooleanField(default=True)),
                ("published_at", models.DateField(blank=True, default=None, null=True)),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="country_organisations",
                        to="rcpch_census_platform.country",
                    ),
                ),
                (
                    "integrated_care_board",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="integrated_care_board_organisations",
                        to="rcpch_census_platform.integratedcareboard",
                    ),
                ),
                (
                    "local_health_board",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="local_health_board_organisations",
                        to="rcpch_census_platform.localhealthboard",
                    ),
                ),
                (
                    "london_borough",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="london_borough_organisations",
                        to="rcpch_census_platform.londonborough",
                    ),
                ),
                (
                    "nhs_england_region",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nhs_england_region_organisations",
                        to="rcpch_census_platform.nhsenglandregion",
                    ),
                ),
                (
                    "openuk_network",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="openuk_network_organisations",
                        to="rcpch_census_platform.openuknetwork",
                    ),
                ),
                (
                    "paediatric_diabetes_unit",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="paediatric_diabetes_unit_organisations",
                        to="rcpch_census_platform.paediatricdiabetesunit",
                    ),
                ),
                (
                    "trust",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trust_organisations",
                        to="rcpch_census_platform.trust",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organisation",
                "verbose_name_plural": "Organisations",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="NorthernIrelandIndexMultipleDeprivation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("imd_rank", models.IntegerField()),
                ("year", models.IntegerField()),
                ("income_rank", models.IntegerField()),
                ("employment_rank", models.IntegerField()),
                ("health_deprivation_and_disability_rank", models.IntegerField()),
                ("education_skills_and_training_rank", models.IntegerField()),
                ("access_to_services_rank", models.IntegerField()),
                ("living_environment_rank", models.IntegerField()),
                ("crime_and_disorder_rank", models.IntegerField()),
                (
                    "soa",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="rcpch_census_platform.soa",
                    ),
                ),
            ],
            options={
                "verbose_name": "Northern Ireland Index of Multiple Deprivation",
                "verbose_name_plural": "Northern Ireland Indices of Multiple Deprivation",
                "ordering": ("imd_rank",),
            },
        ),
        migrations.AddIndex(
            model_name="londonborough",
            index=models.Index(
                fields=["gss_code"], name="rcpch_censu_gss_cod_4090b7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="localhealthboard",
            index=models.Index(
                fields=["ods_code"], name="rcpch_censu_ods_cod_338441_idx"
            ),
        ),
        migrations.AddField(
            model_name="greenspace",
            name="local_authority",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="rcpch_census_platform.localauthority",
            ),
        ),
        migrations.AddField(
            model_name="generalpractice",
            name="country",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="rcpch_census_platform.country",
            ),
        ),
        migrations.AddField(
            model_name="generalpractice",
            name="integrated_care_board",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="rcpch_census_platform.integratedcareboard",
            ),
        ),
        migrations.AddField(
            model_name="generalpractice",
            name="local_health_board",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="rcpch_census_platform.localhealthboard",
            ),
        ),
        migrations.AddField(
            model_name="generalpractice",
            name="london_borough",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="rcpch_census_platform.londonborough",
            ),
        ),
        migrations.AddField(
            model_name="generalpractice",
            name="nhs_england_region",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="rcpch_census_platform.nhsenglandregion",
            ),
        ),
        migrations.AddField(
            model_name="generalpractice",
            name="trust",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="rcpch_census_platform.trust",
            ),
        ),
        migrations.AddField(
            model_name="englishindexmultipledeprivation",
            name="lsoa",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="rcpch_census_platform.lsoa",
            ),
        ),
        migrations.AddField(
            model_name="datazone",
            name="local_authority",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="rcpch_census_platform.localauthority",
            ),
        ),
        migrations.AddIndex(
            model_name="country",
            index=models.Index(
                fields=["boundary_identifier"], name="rcpch_censu_boundar_fc22ce_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organisation",
            index=models.Index(fields=["name"], name="rcpch_censu_name_c6deb2_idx"),
        ),
        migrations.AddIndex(
            model_name="generalpractice",
            index=models.Index(fields=["name"], name="rcpch_censu_name_035ca1_idx"),
        ),
    ]
